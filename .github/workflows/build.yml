name: Build Signed APK (MCGG-Xbot)

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 360
    defaults:
      run:
        working-directory: mobile

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install system packages (autotools & deps)
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential git ccache libffi-dev libssl-dev \
            libsqlite3-dev libjpeg-dev libpng-dev zlib1g-dev \
            openjdk-17-jdk unzip python3-dev \
            libsndfile1 libopenblas-dev wget curl zip \
            automake autoconf libtool libtool-bin m4 pkg-config gettext \
            libltdl-dev

      - name: Prepare Android SDK
        run: |
          SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
          mkdir -p "$SDK_ROOT"
          cd "$SDK_ROOT"

          wget -q https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O tools.zip
          mkdir -p cmdline-tools
          unzip -q tools.zip -d cmdline-tools
          mv cmdline-tools/cmdline-tools cmdline-tools/latest
          rm tools.zip

          echo "ANDROID_SDK_ROOT=$SDK_ROOT" >> $GITHUB_ENV
          echo "$SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$SDK_ROOT/platform-tools" >> $GITHUB_PATH

          yes | $SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --licenses
          $SDK_ROOT/cmdline-tools/latest/bin/sdkmanager --install \
            "platform-tools" "platforms;android-31" "build-tools;31.0.0"

      - name: Fix sdkmanager path for Buildozer
        run: |
          SDK_ROOT="$HOME/.buildozer/android/platform/android-sdk"
          mkdir -p "$SDK_ROOT/tools/bin"
          ln -sf "$SDK_ROOT/cmdline-tools/latest/bin/sdkmanager" "$SDK_ROOT/tools/bin/sdkmanager"

      - name: Install Buildozer & Python deps
        run: |
          python -m pip install --upgrade pip setuptools wheel
          python -m pip install "Cython==0.29.36"
          pip install buildozer==1.5.0 python-for-android==2024.1.21

      - name: Apply pyjnius patch
        run: |
          find .buildozer -type f -path "*/pyjnius/jnius_utils.pxi" -execdir patch -p1 < $GITHUB_WORKSPACE/patches/jnius_fix.patch \; || true

      - name: Decode keystore
        run: |
          if [ -n "${{ secrets.KEYSTORE_BASE64 }}" ]; then
            echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 --decode > ../mcgg-release-key.jks
            chmod 600 ../mcgg-release-key.jks
          fi

      - name: Set NDK path
        run: |
          echo "ANDROIDNDK=$HOME/.buildozer/android/platform/android-ndk-r25b" >> $GITHUB_ENV
          echo "ANDROID_NDK_HOME=$HOME/.buildozer/android/platform/android-ndk-r25b" >> $GITHUB_ENV
          echo "ANDROID_NDK_ROOT=$HOME/.buildozer/android/platform/android-ndk-r25b" >> $GITHUB_ENV

      - name: Clean old builds (optional but recommended)
        run: |
          buildozer android clean || true
          rm -rf .buildozer/android/platform/build-* .buildozer/android/platform/cache || true

      - name: Build APK
        env:
          P4A_RELEASE_KEYSTORE: ${{ github.workspace }}/mcgg-release-key.jks
          P4A_RELEASE_KEYSTORE_PASSWD: ${{ secrets.KEYSTORE_PASSWORD }}
          P4A_RELEASE_KEYALIAS: ${{ secrets.KEY_ALIAS }}
          P4A_RELEASE_KEYALIAS_PASSWD: ${{ secrets.KEY_PASSWORD }}
        run: |
          if [ -f ../mcgg-release-key.jks ]; then
            echo "üîë Building signed release APK..."
            buildozer -v android release
          else
            echo "üêû Building debug APK..."
            buildozer -v android debug
          fi

      - name: Debug APK path (deep scan)
        run: |
          echo "== Cari APK di folder .buildozer =="
          find .buildozer -type f -name "*.apk" || true

      - name: Rename APKs
        run: |
          mkdir -p apk_output
          for file in $(find .buildozer -type f -name "*.apk"); do
            base=$(basename "$file")
            if [[ $file == *"release"* ]]; then
              cp "$file" apk_output/mcgg-xbot-release.apk
            else
              cp "$file" apk_output/mcgg-xbot-debug.apk
            fi
          done
          echo "== APK setelah di-rename =="
          ls -lh apk_output || true

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: mcgg-xbot-apk
          path: mobile/apk_output/*.apk
          if-no-files-found: error

      - name: Create GitHub Release (by run number)
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: "MCGG Xbot Build #${{ github.run_number }}"
          draft: false
          prerelease: false
          files: mobile/apk_output/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete old "latest" release (if exists)
        run: |
          gh release delete latest -y || true
          git push --delete origin latest || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create/Update "latest" Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: latest
          name: "MCGG Xbot (Latest)"
          draft: false
          prerelease: false
          files: mobile/apk_output/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
